TYPE Node
    DECLARE Lpointer: INTEGER
    DECLARE Data: INTEGER
    DECLARE Rpointer: INTEGER
ENDTYPE

DECLARE Tree: ARRAY[0:10] OF Node
DECLARE Root: INTEGER
Declare ItemPointer: INTEGER
DECLARE NewNodePointer: INTEGER
Declare NextNodePointer: INTEGER

Root <-- -1
ItemPointer <-- Root
NewNodePointer <-- NextNodePointer

FOR Count <-- 0 TO 10
    Tree[Count].Data <-- -1 
    Tree[Count].Lpointer <-- Count + 1
    Tree[Count].Rpointer <-- -1
NEXT Count
Tree[10].Lpointer <-- -1

PROCEDURE Add(Item: INTEGER)
    IF NextNodePointer = -1 THEN
        OUTPUT "This TREE IS FULL"
    ELSE
        NewNodePointer <-- NextNodePointer
        NextNodePointer <-- myTree[NextNodePointer].Lpointer
        ItemPointer <-- Root

        WHILE ItemPointer <> -1
            oldPointer = ItemPointer
            IF Item < Tree[ItemPointer].Data THEN
                ItemPointer <-- Tree[ItemPointer].Lpointer
                LeftBranch <-- TRUE
            ELSE:
                ItemPointer <-- Tree[ItemPointer].Rpointer
                RightBranch <-- TRUE
        RETURN ItemPointer

        IF LeftBranch = TRUE THEN
            Tree[oldPointer].Lpointer <-- ItemPointer
        ELSE
            Tree[oldPointer].Rpointer <-- ItemPointer
        ENDIF
    ENDIF
   
ENDPROCEDURE

FUNCTION Search(Item: INTEGER) RETURNS INTEGER
    ItemPointer <-- Root

    WHILE Tree[ItemPointer].Data <> -1 AND ItemPointer <> -1
        IF Item < Tree[ItemPointer].Data THEN
            ItemPointer <-- Tree[ItemPointer].Lpointer
        ELSE:
            ItemPointer <-- Tree[ItemPointer].Rpointer

    RETURN ItemPointer





ENDPROCEDURE